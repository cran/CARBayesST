// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// linpredcompute
NumericVector linpredcompute(NumericMatrix X, const int nsites, const int p, NumericVector beta, NumericVector offset);
RcppExport SEXP _CARBayesST_linpredcompute(SEXP XSEXP, SEXP nsitesSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(linpredcompute(X, nsites, p, beta, offset));
    return rcpp_result_gen;
END_RCPP
}
// quadform
double quadform(NumericMatrix Wtriplet, NumericVector Wtripletsum, const int n_triplet, const int nsites, NumericVector phi, NumericVector theta, double rho);
RcppExport SEXP _CARBayesST_quadform(SEXP WtripletSEXP, SEXP WtripletsumSEXP, SEXP n_tripletSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP thetaSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type n_triplet(n_tripletSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(quadform(Wtriplet, Wtripletsum, n_triplet, nsites, phi, theta, rho));
    return rcpp_result_gen;
END_RCPP
}
// poissonbetaupdateMALA
List poissonbetaupdateMALA(NumericMatrix X, const int nsites, const int p, NumericVector beta, NumericVector offset, NumericVector y, NumericVector prior_meanbeta, NumericVector prior_varbeta, const int nblock, double beta_tune, List block_list);
RcppExport SEXP _CARBayesST_poissonbetaupdateMALA(SEXP XSEXP, SEXP nsitesSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP offsetSEXP, SEXP ySEXP, SEXP prior_meanbetaSEXP, SEXP prior_varbetaSEXP, SEXP nblockSEXP, SEXP beta_tuneSEXP, SEXP block_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meanbeta(prior_meanbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_varbeta(prior_varbetaSEXP);
    Rcpp::traits::input_parameter< const int >::type nblock(nblockSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tune(beta_tuneSEXP);
    Rcpp::traits::input_parameter< List >::type block_list(block_listSEXP);
    rcpp_result_gen = Rcpp::wrap(poissonbetaupdateMALA(X, nsites, p, beta, offset, y, prior_meanbeta, prior_varbeta, nblock, beta_tune, block_list));
    return rcpp_result_gen;
END_RCPP
}
// poissonbetaupdateRW
List poissonbetaupdateRW(NumericMatrix X, const int nsites, const int p, NumericVector beta, NumericVector offset, NumericVector y, NumericVector prior_meanbeta, NumericVector prior_varbeta, const int nblock, double beta_tune, List block_list);
RcppExport SEXP _CARBayesST_poissonbetaupdateRW(SEXP XSEXP, SEXP nsitesSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP offsetSEXP, SEXP ySEXP, SEXP prior_meanbetaSEXP, SEXP prior_varbetaSEXP, SEXP nblockSEXP, SEXP beta_tuneSEXP, SEXP block_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meanbeta(prior_meanbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_varbeta(prior_varbetaSEXP);
    Rcpp::traits::input_parameter< const int >::type nblock(nblockSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tune(beta_tuneSEXP);
    Rcpp::traits::input_parameter< List >::type block_list(block_listSEXP);
    rcpp_result_gen = Rcpp::wrap(poissonbetaupdateRW(X, nsites, p, beta, offset, y, prior_meanbeta, prior_varbeta, nblock, beta_tune, block_list));
    return rcpp_result_gen;
END_RCPP
}
// poissoncarupdateMALA
List poissoncarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, NumericVector phi, double tau2, const NumericMatrix y, const double phi_tune, double rho, NumericMatrix offset, const int ntime, NumericVector mult_offset);
RcppExport SEXP _CARBayesST_poissoncarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP phi_tuneSEXP, SEXP rhoSEXP, SEXP offsetSEXP, SEXP ntimeSEXP, SEXP mult_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mult_offset(mult_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(poissoncarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, phi, tau2, y, phi_tune, rho, offset, ntime, mult_offset));
    return rcpp_result_gen;
END_RCPP
}
// poissoncarupdateRW
List poissoncarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, NumericVector phi, double tau2, const NumericMatrix y, const double phi_tune, double rho, NumericMatrix offset, const int ntime, NumericVector mult_offset);
RcppExport SEXP _CARBayesST_poissoncarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP phi_tuneSEXP, SEXP rhoSEXP, SEXP offsetSEXP, SEXP ntimeSEXP, SEXP mult_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mult_offset(mult_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(poissoncarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, phi, tau2, y, phi_tune, rho, offset, ntime, mult_offset));
    return rcpp_result_gen;
END_RCPP
}
// poissonindepupdateMALA
List poissonindepupdateMALA(const int nsites, NumericVector theta, double sigma2, const NumericVector y, const double theta_tune, NumericVector offset);
RcppExport SEXP _CARBayesST_poissonindepupdateMALA(SEXP nsitesSEXP, SEXP thetaSEXP, SEXP sigma2SEXP, SEXP ySEXP, SEXP theta_tuneSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type theta_tune(theta_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(poissonindepupdateMALA(nsites, theta, sigma2, y, theta_tune, offset));
    return rcpp_result_gen;
END_RCPP
}
// poissonindepupdateRW
List poissonindepupdateRW(const int nsites, NumericVector theta, double tau2, const NumericVector y, const double theta_tune, NumericVector offset);
RcppExport SEXP _CARBayesST_poissonindepupdateRW(SEXP nsitesSEXP, SEXP thetaSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP theta_tuneSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type theta_tune(theta_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(poissonindepupdateRW(nsites, theta, tau2, y, theta_tune, offset));
    return rcpp_result_gen;
END_RCPP
}
// zipcarupdateMALA
List zipcarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, NumericVector phi, double tau2, const NumericMatrix y, const double phi_tune, double rho, NumericMatrix offset, const int ntime, NumericVector mult_offset, NumericMatrix missind);
RcppExport SEXP _CARBayesST_zipcarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP phi_tuneSEXP, SEXP rhoSEXP, SEXP offsetSEXP, SEXP ntimeSEXP, SEXP mult_offsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mult_offset(mult_offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type missind(missindSEXP);
    rcpp_result_gen = Rcpp::wrap(zipcarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, phi, tau2, y, phi_tune, rho, offset, ntime, mult_offset, missind));
    return rcpp_result_gen;
END_RCPP
}
// zipcarupdateRW
List zipcarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, NumericVector phi, double tau2, const NumericMatrix y, const double phi_tune, double rho, NumericMatrix offset, const int ntime, NumericVector mult_offset, NumericMatrix missind);
RcppExport SEXP _CARBayesST_zipcarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP phi_tuneSEXP, SEXP rhoSEXP, SEXP offsetSEXP, SEXP ntimeSEXP, SEXP mult_offsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mult_offset(mult_offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type missind(missindSEXP);
    rcpp_result_gen = Rcpp::wrap(zipcarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, phi, tau2, y, phi_tune, rho, offset, ntime, mult_offset, missind));
    return rcpp_result_gen;
END_RCPP
}
// zipindepupdateMALA
List zipindepupdateMALA(const int nsites, NumericVector theta, double sigma2, const NumericVector y, const double theta_tune, NumericVector offset, NumericVector missind);
RcppExport SEXP _CARBayesST_zipindepupdateMALA(SEXP nsitesSEXP, SEXP thetaSEXP, SEXP sigma2SEXP, SEXP ySEXP, SEXP theta_tuneSEXP, SEXP offsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type theta_tune(theta_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type missind(missindSEXP);
    rcpp_result_gen = Rcpp::wrap(zipindepupdateMALA(nsites, theta, sigma2, y, theta_tune, offset, missind));
    return rcpp_result_gen;
END_RCPP
}
// zipindepupdateRW
List zipindepupdateRW(const int nsites, NumericVector theta, double tau2, const NumericVector y, const double theta_tune, NumericVector offset, NumericVector missind);
RcppExport SEXP _CARBayesST_zipindepupdateRW(SEXP nsitesSEXP, SEXP thetaSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP theta_tuneSEXP, SEXP offsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type theta_tune(theta_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type missind(missindSEXP);
    rcpp_result_gen = Rcpp::wrap(zipindepupdateRW(nsites, theta, tau2, y, theta_tune, offset, missind));
    return rcpp_result_gen;
END_RCPP
}
// binomialbetaupdateMALA
List binomialbetaupdateMALA(NumericMatrix X, const int nsites, const int p, NumericVector beta, NumericVector offset, NumericVector y, NumericVector failures, NumericVector trials, NumericVector prior_meanbeta, NumericVector prior_varbeta, const int nblock, double beta_tune, List block_list);
RcppExport SEXP _CARBayesST_binomialbetaupdateMALA(SEXP XSEXP, SEXP nsitesSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP offsetSEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP trialsSEXP, SEXP prior_meanbetaSEXP, SEXP prior_varbetaSEXP, SEXP nblockSEXP, SEXP beta_tuneSEXP, SEXP block_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trials(trialsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meanbeta(prior_meanbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_varbeta(prior_varbetaSEXP);
    Rcpp::traits::input_parameter< const int >::type nblock(nblockSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tune(beta_tuneSEXP);
    Rcpp::traits::input_parameter< List >::type block_list(block_listSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialbetaupdateMALA(X, nsites, p, beta, offset, y, failures, trials, prior_meanbeta, prior_varbeta, nblock, beta_tune, block_list));
    return rcpp_result_gen;
END_RCPP
}
// binomialbetaupdateRW
List binomialbetaupdateRW(NumericMatrix X, const int nsites, const int p, NumericVector beta, NumericVector offset, NumericVector y, NumericVector failures, NumericVector prior_meanbeta, NumericVector prior_varbeta, const int nblock, double beta_tune, List block_list);
RcppExport SEXP _CARBayesST_binomialbetaupdateRW(SEXP XSEXP, SEXP nsitesSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP offsetSEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP prior_meanbetaSEXP, SEXP prior_varbetaSEXP, SEXP nblockSEXP, SEXP beta_tuneSEXP, SEXP block_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meanbeta(prior_meanbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_varbeta(prior_varbetaSEXP);
    Rcpp::traits::input_parameter< const int >::type nblock(nblockSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tune(beta_tuneSEXP);
    Rcpp::traits::input_parameter< List >::type block_list(block_listSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialbetaupdateRW(X, nsites, p, beta, offset, y, failures, prior_meanbeta, prior_varbeta, nblock, beta_tune, block_list));
    return rcpp_result_gen;
END_RCPP
}
// binomialindepupdateMALA
List binomialindepupdateMALA(const int nsites, NumericVector theta, double sigma2, const NumericVector y, const NumericVector failures, const NumericVector trials, const double theta_tune, NumericVector offset);
RcppExport SEXP _CARBayesST_binomialindepupdateMALA(SEXP nsitesSEXP, SEXP thetaSEXP, SEXP sigma2SEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP trialsSEXP, SEXP theta_tuneSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type trials(trialsSEXP);
    Rcpp::traits::input_parameter< const double >::type theta_tune(theta_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialindepupdateMALA(nsites, theta, sigma2, y, failures, trials, theta_tune, offset));
    return rcpp_result_gen;
END_RCPP
}
// binomialindepupdateRW
List binomialindepupdateRW(const int nsites, NumericVector theta, double tau2, const NumericVector y, const NumericVector failures, const double theta_tune, NumericVector offset);
RcppExport SEXP _CARBayesST_binomialindepupdateRW(SEXP nsitesSEXP, SEXP thetaSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP theta_tuneSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< const double >::type theta_tune(theta_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialindepupdateRW(nsites, theta, tau2, y, failures, theta_tune, offset));
    return rcpp_result_gen;
END_RCPP
}
// binomialcarupdateMALA
List binomialcarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, NumericVector phi, double tau2, const NumericMatrix y, const NumericMatrix failures, const NumericMatrix trials, const double phi_tune, double rho, NumericMatrix offset, const int ntime, NumericVector mult_offset);
RcppExport SEXP _CARBayesST_binomialcarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP trialsSEXP, SEXP phi_tuneSEXP, SEXP rhoSEXP, SEXP offsetSEXP, SEXP ntimeSEXP, SEXP mult_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type trials(trialsSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mult_offset(mult_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialcarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, phi, tau2, y, failures, trials, phi_tune, rho, offset, ntime, mult_offset));
    return rcpp_result_gen;
END_RCPP
}
// binomialcarupdateRW
List binomialcarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, NumericVector phi, double tau2, const NumericMatrix y, const NumericMatrix failures, const double phi_tune, double rho, NumericMatrix offset, const int ntime, NumericVector mult_offset);
RcppExport SEXP _CARBayesST_binomialcarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP phi_tuneSEXP, SEXP rhoSEXP, SEXP offsetSEXP, SEXP ntimeSEXP, SEXP mult_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mult_offset(mult_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialcarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, phi, tau2, y, failures, phi_tune, rho, offset, ntime, mult_offset));
    return rcpp_result_gen;
END_RCPP
}
// gaussiancarupdate
NumericVector gaussiancarupdate(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, NumericVector phi, double tau2, double nu2, const NumericVector offset, double rho, double ntime);
RcppExport SEXP _CARBayesST_gaussiancarupdate(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP nu2SEXP, SEXP offsetSEXP, SEXP rhoSEXP, SEXP ntimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type nu2(nu2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type ntime(ntimeSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussiancarupdate(Wtriplet, Wbegfin, Wtripletsum, nsites, phi, tau2, nu2, offset, rho, ntime));
    return rcpp_result_gen;
END_RCPP
}
// poissonarcarupdateMALA
List poissonarcarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double tau2, double gamma, double rho, const NumericMatrix ymat, const double phi_tune, NumericMatrix offset, NumericVector denoffset);
RcppExport SEXP _CARBayesST_poissonarcarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    rcpp_result_gen = Rcpp::wrap(poissonarcarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, tau2, gamma, rho, ymat, phi_tune, offset, denoffset));
    return rcpp_result_gen;
END_RCPP
}
// poissonarcarupdateRW
List poissonarcarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double tau2, double gamma, double rho, const NumericMatrix ymat, const double phi_tune, NumericMatrix offset, NumericVector denoffset);
RcppExport SEXP _CARBayesST_poissonarcarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    rcpp_result_gen = Rcpp::wrap(poissonarcarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, tau2, gamma, rho, ymat, phi_tune, offset, denoffset));
    return rcpp_result_gen;
END_RCPP
}
// ziparcarupdateMALA
List ziparcarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double tau2, double gamma, double rho, const NumericMatrix ymat, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericMatrix missind);
RcppExport SEXP _CARBayesST_ziparcarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type missind(missindSEXP);
    rcpp_result_gen = Rcpp::wrap(ziparcarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, tau2, gamma, rho, ymat, phi_tune, offset, denoffset, missind));
    return rcpp_result_gen;
END_RCPP
}
// ziparcarupdateRW
List ziparcarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double tau2, double gamma, double rho, const NumericMatrix ymat, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericMatrix missind);
RcppExport SEXP _CARBayesST_ziparcarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type missind(missindSEXP);
    rcpp_result_gen = Rcpp::wrap(ziparcarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, tau2, gamma, rho, ymat, phi_tune, offset, denoffset, missind));
    return rcpp_result_gen;
END_RCPP
}
// gammaquadformcompute
List gammaquadformcompute(NumericMatrix Wtriplet, NumericVector Wtripletsum, const int n_triplet, const int nsites, const int ntime, NumericMatrix phi, double rho);
RcppExport SEXP _CARBayesST_gammaquadformcompute(SEXP WtripletSEXP, SEXP WtripletsumSEXP, SEXP n_tripletSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type n_triplet(n_tripletSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(gammaquadformcompute(Wtriplet, Wtripletsum, n_triplet, nsites, ntime, phi, rho));
    return rcpp_result_gen;
END_RCPP
}
// tauquadformcompute
double tauquadformcompute(NumericMatrix Wtriplet, NumericVector Wtripletsum, const int n_triplet, const int nsites, const int ntime, NumericMatrix phi, double rho, double gamma);
RcppExport SEXP _CARBayesST_tauquadformcompute(SEXP WtripletSEXP, SEXP WtripletsumSEXP, SEXP n_tripletSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type n_triplet(n_tripletSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(tauquadformcompute(Wtriplet, Wtripletsum, n_triplet, nsites, ntime, phi, rho, gamma));
    return rcpp_result_gen;
END_RCPP
}
// binomialarcarupdateMALA
List binomialarcarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double tau2, double gamma, double rho, const NumericMatrix ymat, const NumericMatrix failuresmat, const NumericMatrix trialsmat, const double phi_tune, NumericMatrix offset, NumericVector denoffset);
RcppExport SEXP _CARBayesST_binomialarcarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP failuresmatSEXP, SEXP trialsmatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type failuresmat(failuresmatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type trialsmat(trialsmatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialarcarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, tau2, gamma, rho, ymat, failuresmat, trialsmat, phi_tune, offset, denoffset));
    return rcpp_result_gen;
END_RCPP
}
// binomialarcarupdateRW
List binomialarcarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double tau2, double gamma, double rho, const NumericMatrix ymat, const NumericMatrix failuresmat, const double phi_tune, NumericMatrix offset, NumericVector denoffset);
RcppExport SEXP _CARBayesST_binomialarcarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP failuresmatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type failuresmat(failuresmatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialarcarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, tau2, gamma, rho, ymat, failuresmat, phi_tune, offset, denoffset));
    return rcpp_result_gen;
END_RCPP
}
// gaussianarcarupdate
NumericMatrix gaussianarcarupdate(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double tau2, double nu2, double gamma, double rho, NumericMatrix offset, NumericVector denoffset);
RcppExport SEXP _CARBayesST_gaussianarcarupdate(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP nu2SEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type nu2(nu2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussianarcarupdate(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, tau2, nu2, gamma, rho, offset, denoffset));
    return rcpp_result_gen;
END_RCPP
}
// qform
double qform(NumericMatrix Qtrip, NumericVector phi);
RcppExport SEXP _CARBayesST_qform(SEXP QtripSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtrip(QtripSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(qform(Qtrip, phi));
    return rcpp_result_gen;
END_RCPP
}
// qform_asym
double qform_asym(NumericMatrix Qtrip, NumericVector phi1, NumericVector phi2);
RcppExport SEXP _CARBayesST_qform_asym(SEXP QtripSEXP, SEXP phi1SEXP, SEXP phi2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtrip(QtripSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi1(phi1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi2(phi2SEXP);
    rcpp_result_gen = Rcpp::wrap(qform_asym(Qtrip, phi1, phi2));
    return rcpp_result_gen;
END_RCPP
}
// qformSPACETIME
double qformSPACETIME(NumericMatrix Qtrip, NumericVector phi, const int ntime, const int nsite);
RcppExport SEXP _CARBayesST_qformSPACETIME(SEXP QtripSEXP, SEXP phiSEXP, SEXP ntimeSEXP, SEXP nsiteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtrip(QtripSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const int >::type nsite(nsiteSEXP);
    rcpp_result_gen = Rcpp::wrap(qformSPACETIME(Qtrip, phi, ntime, nsite));
    return rcpp_result_gen;
END_RCPP
}
// SPTICARphiGaussian
List SPTICARphiGaussian(NumericMatrix W, const int nsites, const int ntimes, NumericVector phi, NumericVector nneighbours, double tau, double lik_var, const NumericVector y, double alpha, NumericVector XB);
RcppExport SEXP _CARBayesST_SPTICARphiGaussian(SEXP WSEXP, SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP phiSEXP, SEXP nneighboursSEXP, SEXP tauSEXP, SEXP lik_varSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP XBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nneighbours(nneighboursSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lik_var(lik_varSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type XB(XBSEXP);
    rcpp_result_gen = Rcpp::wrap(SPTICARphiGaussian(W, nsites, ntimes, phi, nneighbours, tau, lik_var, y, alpha, XB));
    return rcpp_result_gen;
END_RCPP
}
// qform_difference_ST
double qform_difference_ST(NumericMatrix Qtrip, NumericMatrix Qtime, NumericVector phi, int nsites);
RcppExport SEXP _CARBayesST_qform_difference_ST(SEXP QtripSEXP, SEXP QtimeSEXP, SEXP phiSEXP, SEXP nsitesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtrip(QtripSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtime(QtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type nsites(nsitesSEXP);
    rcpp_result_gen = Rcpp::wrap(qform_difference_ST(Qtrip, Qtime, phi, nsites));
    return rcpp_result_gen;
END_RCPP
}
// qform_ST
double qform_ST(NumericMatrix Qspace, NumericMatrix Qtime, NumericVector phi, int nsites);
RcppExport SEXP _CARBayesST_qform_ST(SEXP QspaceSEXP, SEXP QtimeSEXP, SEXP phiSEXP, SEXP nsitesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qspace(QspaceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtime(QtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type nsites(nsitesSEXP);
    rcpp_result_gen = Rcpp::wrap(qform_ST(Qspace, Qtime, phi, nsites));
    return rcpp_result_gen;
END_RCPP
}
// qform_ST_asym
double qform_ST_asym(NumericMatrix Qspace, NumericMatrix Qtime, NumericVector phi1, NumericVector phi2, int nsites);
RcppExport SEXP _CARBayesST_qform_ST_asym(SEXP QspaceSEXP, SEXP QtimeSEXP, SEXP phi1SEXP, SEXP phi2SEXP, SEXP nsitesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qspace(QspaceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtime(QtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi1(phi1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi2(phi2SEXP);
    Rcpp::traits::input_parameter< int >::type nsites(nsitesSEXP);
    rcpp_result_gen = Rcpp::wrap(qform_ST_asym(Qspace, Qtime, phi1, phi2, nsites));
    return rcpp_result_gen;
END_RCPP
}
// update_Qtime
NumericMatrix update_Qtime(NumericMatrix Qtime, double alpha, int rowNumberLastDiag);
RcppExport SEXP _CARBayesST_update_Qtime(SEXP QtimeSEXP, SEXP alphaSEXP, SEXP rowNumberLastDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtime(QtimeSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type rowNumberLastDiag(rowNumberLastDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Qtime(Qtime, alpha, rowNumberLastDiag));
    return rcpp_result_gen;
END_RCPP
}
// updatetriplets_rho
NumericMatrix updatetriplets_rho(NumericMatrix trips, int nsites, double rho_old, double rho_new, double fixedridge);
RcppExport SEXP _CARBayesST_updatetriplets_rho(SEXP tripsSEXP, SEXP nsitesSEXP, SEXP rho_oldSEXP, SEXP rho_newSEXP, SEXP fixedridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type trips(tripsSEXP);
    Rcpp::traits::input_parameter< int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< double >::type rho_old(rho_oldSEXP);
    Rcpp::traits::input_parameter< double >::type rho_new(rho_newSEXP);
    Rcpp::traits::input_parameter< double >::type fixedridge(fixedridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(updatetriplets_rho(trips, nsites, rho_old, rho_new, fixedridge));
    return rcpp_result_gen;
END_RCPP
}
// updatetripList2
List updatetripList2(NumericMatrix trips, NumericVector vold, NumericVector vnew, const int nedges, int nsites, IntegerVector block, int block_length, double rho, double fixedridge);
RcppExport SEXP _CARBayesST_updatetripList2(SEXP tripsSEXP, SEXP voldSEXP, SEXP vnewSEXP, SEXP nedgesSEXP, SEXP nsitesSEXP, SEXP blockSEXP, SEXP block_lengthSEXP, SEXP rhoSEXP, SEXP fixedridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type trips(tripsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vold(voldSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vnew(vnewSEXP);
    Rcpp::traits::input_parameter< const int >::type nedges(nedgesSEXP);
    Rcpp::traits::input_parameter< int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type block(blockSEXP);
    Rcpp::traits::input_parameter< int >::type block_length(block_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type fixedridge(fixedridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(updatetripList2(trips, vold, vnew, nedges, nsites, block, block_length, rho, fixedridge));
    return rcpp_result_gen;
END_RCPP
}
// Zupdatesqbin
NumericMatrix Zupdatesqbin(NumericMatrix Z, NumericMatrix Offset, NumericMatrix Y, const double delta, NumericVector lambda, const int nsites, const int ntime, const int G, NumericVector SS, NumericVector prioroffset, const double Gstar, NumericMatrix failures);
RcppExport SEXP _CARBayesST_Zupdatesqbin(SEXP ZSEXP, SEXP OffsetSEXP, SEXP YSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP GSEXP, SEXP SSSEXP, SEXP prioroffsetSEXP, SEXP GstarSEXP, SEXP failuresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Offset(OffsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prioroffset(prioroffsetSEXP);
    Rcpp::traits::input_parameter< const double >::type Gstar(GstarSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type failures(failuresSEXP);
    rcpp_result_gen = Rcpp::wrap(Zupdatesqbin(Z, Offset, Y, delta, lambda, nsites, ntime, G, SS, prioroffset, Gstar, failures));
    return rcpp_result_gen;
END_RCPP
}
// Zupdatesqpoi
NumericMatrix Zupdatesqpoi(NumericMatrix Z, NumericMatrix Offset, NumericMatrix Y, const double delta, NumericVector lambda, const int nsites, const int ntime, const int G, NumericVector SS, NumericVector prioroffset, const double Gstar);
RcppExport SEXP _CARBayesST_Zupdatesqpoi(SEXP ZSEXP, SEXP OffsetSEXP, SEXP YSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP GSEXP, SEXP SSSEXP, SEXP prioroffsetSEXP, SEXP GstarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Offset(OffsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prioroffset(prioroffsetSEXP);
    Rcpp::traits::input_parameter< const double >::type Gstar(GstarSEXP);
    rcpp_result_gen = Rcpp::wrap(Zupdatesqpoi(Z, Offset, Y, delta, lambda, nsites, ntime, G, SS, prioroffset, Gstar));
    return rcpp_result_gen;
END_RCPP
}
// Zupdatesqgau
NumericMatrix Zupdatesqgau(NumericMatrix Z, NumericMatrix Offset, const double delta, NumericVector lambda, const int nsites, const int ntime, const int G, NumericVector SS, NumericVector prioroffset, const double Gstar, const double nu2);
RcppExport SEXP _CARBayesST_Zupdatesqgau(SEXP ZSEXP, SEXP OffsetSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP GSEXP, SEXP SSSEXP, SEXP prioroffsetSEXP, SEXP GstarSEXP, SEXP nu2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Offset(OffsetSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prioroffset(prioroffsetSEXP);
    Rcpp::traits::input_parameter< const double >::type Gstar(GstarSEXP);
    Rcpp::traits::input_parameter< const double >::type nu2(nu2SEXP);
    rcpp_result_gen = Rcpp::wrap(Zupdatesqgau(Z, Offset, delta, lambda, nsites, ntime, G, SS, prioroffset, Gstar, nu2));
    return rcpp_result_gen;
END_RCPP
}
// tau2compute
NumericVector tau2compute(NumericVector tau2, NumericVector temp, const double tau2_shape, const double prior_tau2, const int N);
RcppExport SEXP _CARBayesST_tau2compute(SEXP tau2SEXP, SEXP tempSEXP, SEXP tau2_shapeSEXP, SEXP prior_tau2SEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< const double >::type tau2_shape(tau2_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_tau2(prior_tau2SEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(tau2compute(tau2, temp, tau2_shape, prior_tau2, N));
    return rcpp_result_gen;
END_RCPP
}
// rhoquadformcompute
double rhoquadformcompute(NumericMatrix Wtriplet, NumericVector Wtripletsum, const int n_triplet, const int nsites, const int ntime, NumericMatrix phi, double rho, NumericVector tau2);
RcppExport SEXP _CARBayesST_rhoquadformcompute(SEXP WtripletSEXP, SEXP WtripletsumSEXP, SEXP n_tripletSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type n_triplet(n_tripletSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(rhoquadformcompute(Wtriplet, Wtripletsum, n_triplet, nsites, ntime, phi, rho, tau2));
    return rcpp_result_gen;
END_RCPP
}
// binomialsrecarupdateMALA
List binomialsrecarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double rho, const NumericMatrix y, const NumericMatrix failures, NumericMatrix trials, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericVector tau2);
RcppExport SEXP _CARBayesST_binomialsrecarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP trialsSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type trials(trialsSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(binomialsrecarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, rho, y, failures, trials, phi_tune, offset, denoffset, tau2));
    return rcpp_result_gen;
END_RCPP
}
// binomialsrecarupdateRW
List binomialsrecarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double rho, const NumericMatrix ymat, const NumericMatrix failuresmat, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericVector tau2);
RcppExport SEXP _CARBayesST_binomialsrecarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP failuresmatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type failuresmat(failuresmatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(binomialsrecarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, rho, ymat, failuresmat, phi_tune, offset, denoffset, tau2));
    return rcpp_result_gen;
END_RCPP
}
// poissonsrecarupdateMALA
List poissonsrecarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double rho, const NumericMatrix ymat, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericVector tau2);
RcppExport SEXP _CARBayesST_poissonsrecarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(poissonsrecarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, rho, ymat, phi_tune, offset, denoffset, tau2));
    return rcpp_result_gen;
END_RCPP
}
// poissonsrecarupdateRW
List poissonsrecarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double rho, const NumericMatrix ymat, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericVector tau2);
RcppExport SEXP _CARBayesST_poissonsrecarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(poissonsrecarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, rho, ymat, phi_tune, offset, denoffset, tau2));
    return rcpp_result_gen;
END_RCPP
}
// tauquadformcompute2
NumericVector tauquadformcompute2(NumericMatrix Wtriplet, NumericVector Wtripletsum, const int n_triplet, const int nsites, const int ntime, NumericMatrix phi, double rho);
RcppExport SEXP _CARBayesST_tauquadformcompute2(SEXP WtripletSEXP, SEXP WtripletsumSEXP, SEXP n_tripletSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type n_triplet(n_tripletSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(tauquadformcompute2(Wtriplet, Wtripletsum, n_triplet, nsites, ntime, phi, rho));
    return rcpp_result_gen;
END_RCPP
}
// SPTICARphiVarbMALA
List SPTICARphiVarbMALA(NumericMatrix W, const int nsites, const int ntimes, NumericVector phiVarb, NumericVector nneighbours, double tau, const NumericVector y, const NumericVector E, const double phiVarb_tune, double alpha, NumericVector XB);
RcppExport SEXP _CARBayesST_SPTICARphiVarbMALA(SEXP WSEXP, SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP phiVarbSEXP, SEXP nneighboursSEXP, SEXP tauSEXP, SEXP ySEXP, SEXP ESEXP, SEXP phiVarb_tuneSEXP, SEXP alphaSEXP, SEXP XBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phiVarb(phiVarbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nneighbours(nneighboursSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type E(ESEXP);
    Rcpp::traits::input_parameter< const double >::type phiVarb_tune(phiVarb_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type XB(XBSEXP);
    rcpp_result_gen = Rcpp::wrap(SPTICARphiVarbMALA(W, nsites, ntimes, phiVarb, nneighbours, tau, y, E, phiVarb_tune, alpha, XB));
    return rcpp_result_gen;
END_RCPP
}
// SPTICARphiBinomialMALA
List SPTICARphiBinomialMALA(NumericMatrix W, const int nsites, const int ntimes, NumericVector phi, NumericVector nneighbours, double tau, const NumericVector y, double alpha, NumericVector XB, const double phiVarb_tune, NumericVector trials);
RcppExport SEXP _CARBayesST_SPTICARphiBinomialMALA(SEXP WSEXP, SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP phiSEXP, SEXP nneighboursSEXP, SEXP tauSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP XBSEXP, SEXP phiVarb_tuneSEXP, SEXP trialsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nneighbours(nneighboursSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type XB(XBSEXP);
    Rcpp::traits::input_parameter< const double >::type phiVarb_tune(phiVarb_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trials(trialsSEXP);
    rcpp_result_gen = Rcpp::wrap(SPTICARphiBinomialMALA(W, nsites, ntimes, phi, nneighbours, tau, y, alpha, XB, phiVarb_tune, trials));
    return rcpp_result_gen;
END_RCPP
}
// SPTICARphiBinomial
List SPTICARphiBinomial(NumericMatrix W, const int nsites, const int ntimes, NumericVector phi, NumericVector nneighbours, double tau, const NumericVector y, double alpha, NumericVector XB, const double phiVarb_tune, NumericVector trials);
RcppExport SEXP _CARBayesST_SPTICARphiBinomial(SEXP WSEXP, SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP phiSEXP, SEXP nneighboursSEXP, SEXP tauSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP XBSEXP, SEXP phiVarb_tuneSEXP, SEXP trialsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nneighbours(nneighboursSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type XB(XBSEXP);
    Rcpp::traits::input_parameter< const double >::type phiVarb_tune(phiVarb_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trials(trialsSEXP);
    rcpp_result_gen = Rcpp::wrap(SPTICARphiBinomial(W, nsites, ntimes, phi, nneighbours, tau, y, alpha, XB, phiVarb_tune, trials));
    return rcpp_result_gen;
END_RCPP
}
// SPTICARphiVarb
List SPTICARphiVarb(NumericMatrix W, const int nsites, const int ntimes, NumericVector phiVarb, NumericVector nneighbours, double tau, const NumericVector y, const NumericVector E, const double phiVarb_tune, double alpha, NumericVector XB);
RcppExport SEXP _CARBayesST_SPTICARphiVarb(SEXP WSEXP, SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP phiVarbSEXP, SEXP nneighboursSEXP, SEXP tauSEXP, SEXP ySEXP, SEXP ESEXP, SEXP phiVarb_tuneSEXP, SEXP alphaSEXP, SEXP XBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phiVarb(phiVarbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nneighbours(nneighboursSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type E(ESEXP);
    Rcpp::traits::input_parameter< const double >::type phiVarb_tune(phiVarb_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type XB(XBSEXP);
    rcpp_result_gen = Rcpp::wrap(SPTICARphiVarb(W, nsites, ntimes, phiVarb, nneighbours, tau, y, E, phiVarb_tune, alpha, XB));
    return rcpp_result_gen;
END_RCPP
}
// tempupdate
NumericVector tempupdate(const int Nchains, double dt);
RcppExport SEXP _CARBayesST_tempupdate(SEXP NchainsSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(tempupdate(Nchains, dt));
    return rcpp_result_gen;
END_RCPP
}
// matcomp
NumericMatrix matcomp(NumericMatrix X, NumericMatrix beta, NumericVector prop, const int p, const int Nchains);
RcppExport SEXP _CARBayesST_matcomp(SEXP XSEXP, SEXP betaSEXP, SEXP propSEXP, SEXP pSEXP, SEXP NchainsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prop(propSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    rcpp_result_gen = Rcpp::wrap(matcomp(X, beta, prop, p, Nchains));
    return rcpp_result_gen;
END_RCPP
}
// offsetcompute
NumericMatrix offsetcompute(NumericMatrix w, NumericMatrix gamma, NumericMatrix time, const int Nchains, const int nsites, const int Ntrends, NumericVector begin);
RcppExport SEXP _CARBayesST_offsetcompute(SEXP wSEXP, SEXP gammaSEXP, SEXP timeSEXP, SEXP NchainsSEXP, SEXP nsitesSEXP, SEXP NtrendsSEXP, SEXP beginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type Ntrends(NtrendsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type begin(beginSEXP);
    rcpp_result_gen = Rcpp::wrap(offsetcompute(w, gamma, time, Nchains, nsites, Ntrends, begin));
    return rcpp_result_gen;
END_RCPP
}
// matN
NumericMatrix matN(NumericVector x, const int nsites, const int Nchains);
RcppExport SEXP _CARBayesST_matN(SEXP xSEXP, SEXP nsitesSEXP, SEXP NchainsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    rcpp_result_gen = Rcpp::wrap(matN(x, nsites, Nchains));
    return rcpp_result_gen;
END_RCPP
}
// linpredcomputeNchains
NumericMatrix linpredcomputeNchains(NumericMatrix X, const int nsites, const int p, NumericMatrix beta, const int Nchains);
RcppExport SEXP _CARBayesST_linpredcomputeNchains(SEXP XSEXP, SEXP nsitesSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP NchainsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    rcpp_result_gen = Rcpp::wrap(linpredcomputeNchains(X, nsites, p, beta, Nchains));
    return rcpp_result_gen;
END_RCPP
}
// gammaproposal
NumericVector gammaproposal(const int Nchains, NumericVector gamma, NumericVector gamma_tune, const int prior_vargamma, NumericVector Wareas, const int trend, const int knots);
RcppExport SEXP _CARBayesST_gammaproposal(SEXP NchainsSEXP, SEXP gammaSEXP, SEXP gamma_tuneSEXP, SEXP prior_vargammaSEXP, SEXP WareasSEXP, SEXP trendSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma_tune(gamma_tuneSEXP);
    Rcpp::traits::input_parameter< const int >::type prior_vargamma(prior_vargammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wareas(WareasSEXP);
    Rcpp::traits::input_parameter< const int >::type trend(trendSEXP);
    Rcpp::traits::input_parameter< const int >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(gammaproposal(Nchains, gamma, gamma_tune, prior_vargamma, Wareas, trend, knots));
    return rcpp_result_gen;
END_RCPP
}
// lambdaupdate
NumericMatrix lambdaupdate(const int Nchains, NumericMatrix temp);
RcppExport SEXP _CARBayesST_lambdaupdate(SEXP NchainsSEXP, SEXP tempSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type temp(tempSEXP);
    rcpp_result_gen = Rcpp::wrap(lambdaupdate(Nchains, temp));
    return rcpp_result_gen;
END_RCPP
}
// tau2quadform
NumericVector tau2quadform(NumericMatrix Wtriplet, NumericVector Wtripletsum, const int n_triplet, const int nsites, NumericMatrix phi, NumericMatrix theta, NumericVector rho, const int Nchains);
RcppExport SEXP _CARBayesST_tau2quadform(SEXP WtripletSEXP, SEXP WtripletsumSEXP, SEXP n_tripletSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP thetaSEXP, SEXP rhoSEXP, SEXP NchainsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type n_triplet(n_tripletSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    rcpp_result_gen = Rcpp::wrap(tau2quadform(Wtriplet, Wtripletsum, n_triplet, nsites, phi, theta, rho, Nchains));
    return rcpp_result_gen;
END_RCPP
}
// tau2computeNchains
NumericVector tau2computeNchains(NumericVector temp, const double tau2_shape, const double prior_tau2, const int Nchains);
RcppExport SEXP _CARBayesST_tau2computeNchains(SEXP tempSEXP, SEXP tau2_shapeSEXP, SEXP prior_tau2SEXP, SEXP NchainsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< const double >::type tau2_shape(tau2_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_tau2(prior_tau2SEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    rcpp_result_gen = Rcpp::wrap(tau2computeNchains(temp, tau2_shape, prior_tau2, Nchains));
    return rcpp_result_gen;
END_RCPP
}
// rhoquadformcomputeNchains
NumericVector rhoquadformcomputeNchains(NumericMatrix Wtriplet, NumericVector Wtripletsum, const int n_triplet, const int nsites, const int Nchains, NumericMatrix phi, NumericVector rho, NumericVector tau2);
RcppExport SEXP _CARBayesST_rhoquadformcomputeNchains(SEXP WtripletSEXP, SEXP WtripletsumSEXP, SEXP n_tripletSEXP, SEXP nsitesSEXP, SEXP NchainsSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type n_triplet(n_tripletSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(rhoquadformcomputeNchains(Wtriplet, Wtripletsum, n_triplet, nsites, Nchains, phi, rho, tau2));
    return rcpp_result_gen;
END_RCPP
}
// Qdet
NumericVector Qdet(const int Nchains, NumericVector rho, NumericVector Wstar_val);
RcppExport SEXP _CARBayesST_Qdet(SEXP NchainsSEXP, SEXP rhoSEXP, SEXP Wstar_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wstar_val(Wstar_valSEXP);
    rcpp_result_gen = Rcpp::wrap(Qdet(Nchains, rho, Wstar_val));
    return rcpp_result_gen;
END_RCPP
}
// poissondevfit
List poissondevfit(NumericVector y, NumericMatrix fitted, const int nsites, const int Nchains);
RcppExport SEXP _CARBayesST_poissondevfit(SEXP ySEXP, SEXP fittedSEXP, SEXP nsitesSEXP, SEXP NchainsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type fitted(fittedSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    rcpp_result_gen = Rcpp::wrap(poissondevfit(y, fitted, nsites, Nchains));
    return rcpp_result_gen;
END_RCPP
}
// poissonbetablockupdate
NumericVector poissonbetablockupdate(const int nsites, NumericMatrix beta, NumericMatrix betaprop, NumericMatrix lp_beta, NumericMatrix lp_betaprop, NumericMatrix offset, NumericVector y, NumericVector prior_meanbeta, NumericVector prior_varbeta, const int Nchains, NumericVector temps, const int p);
RcppExport SEXP _CARBayesST_poissonbetablockupdate(SEXP nsitesSEXP, SEXP betaSEXP, SEXP betapropSEXP, SEXP lp_betaSEXP, SEXP lp_betapropSEXP, SEXP offsetSEXP, SEXP ySEXP, SEXP prior_meanbetaSEXP, SEXP prior_varbetaSEXP, SEXP NchainsSEXP, SEXP tempsSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type betaprop(betapropSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lp_beta(lp_betaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lp_betaprop(lp_betapropSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meanbeta(prior_meanbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_varbeta(prior_varbetaSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type temps(tempsSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(poissonbetablockupdate(nsites, beta, betaprop, lp_beta, lp_betaprop, offset, y, prior_meanbeta, prior_varbeta, Nchains, temps, p));
    return rcpp_result_gen;
END_RCPP
}
// poissongammaupdate
List poissongammaupdate(const int nsites, NumericVector gamma, NumericVector proposal, NumericMatrix offset, NumericMatrix offset_proposal, NumericVector y, double prior_meangamma, double prior_vargamma, const int Nchains, NumericVector temps);
RcppExport SEXP _CARBayesST_poissongammaupdate(SEXP nsitesSEXP, SEXP gammaSEXP, SEXP proposalSEXP, SEXP offsetSEXP, SEXP offset_proposalSEXP, SEXP ySEXP, SEXP prior_meangammaSEXP, SEXP prior_vargammaSEXP, SEXP NchainsSEXP, SEXP tempsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type proposal(proposalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset_proposal(offset_proposalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type prior_meangamma(prior_meangammaSEXP);
    Rcpp::traits::input_parameter< double >::type prior_vargamma(prior_vargammaSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type temps(tempsSEXP);
    rcpp_result_gen = Rcpp::wrap(poissongammaupdate(nsites, gamma, proposal, offset, offset_proposal, y, prior_meangamma, prior_vargamma, Nchains, temps));
    return rcpp_result_gen;
END_RCPP
}
// poissonwupdate
List poissonwupdate(const int nsites, const int ntimes, NumericMatrix w, NumericMatrix offset, NumericMatrix offset_proposal, NumericMatrix w_proposal, NumericMatrix y, NumericMatrix lambda, const int Nchains, NumericVector temps, NumericVector begin, NumericVector regbegin, const int Ntrends);
RcppExport SEXP _CARBayesST_poissonwupdate(SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP wSEXP, SEXP offsetSEXP, SEXP offset_proposalSEXP, SEXP w_proposalSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP NchainsSEXP, SEXP tempsSEXP, SEXP beginSEXP, SEXP regbeginSEXP, SEXP NtrendsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset_proposal(offset_proposalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type w_proposal(w_proposalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type temps(tempsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type begin(beginSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type regbegin(regbeginSEXP);
    Rcpp::traits::input_parameter< const int >::type Ntrends(NtrendsSEXP);
    rcpp_result_gen = Rcpp::wrap(poissonwupdate(nsites, ntimes, w, offset, offset_proposal, w_proposal, y, lambda, Nchains, temps, begin, regbegin, Ntrends));
    return rcpp_result_gen;
END_RCPP
}
// poissonphiupdate
List poissonphiupdate(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntimes, NumericMatrix phi, NumericMatrix offset, NumericMatrix y, NumericVector tau2, NumericVector rho, const int Nchains, NumericVector temps, NumericMatrix phi_tune, NumericVector regbegin);
RcppExport SEXP _CARBayesST_poissonphiupdate(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP phiSEXP, SEXP offsetSEXP, SEXP ySEXP, SEXP tau2SEXP, SEXP rhoSEXP, SEXP NchainsSEXP, SEXP tempsSEXP, SEXP phi_tuneSEXP, SEXP regbeginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type temps(tempsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type regbegin(regbeginSEXP);
    rcpp_result_gen = Rcpp::wrap(poissonphiupdate(Wtriplet, Wbegfin, Wtripletsum, nsites, ntimes, phi, offset, y, tau2, rho, Nchains, temps, phi_tune, regbegin));
    return rcpp_result_gen;
END_RCPP
}
// poissoncouplingAllupdate
int poissoncouplingAllupdate(const int nsites, const int K, const int p, NumericMatrix w, NumericMatrix offset, NumericMatrix beta, NumericMatrix gamma, NumericMatrix lambda, NumericMatrix phi, NumericVector rho, NumericVector tau2, NumericVector Wtripletsum, NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector y, NumericVector prior_meanbeta, NumericVector prior_varbeta, NumericVector prior_meantrends, NumericVector prior_vartrends, NumericVector prior_lambda, NumericVector prior_tau2, NumericVector swap, NumericVector temps, NumericVector begin, const int Ntrends, const int TrendSel);
RcppExport SEXP _CARBayesST_poissoncouplingAllupdate(SEXP nsitesSEXP, SEXP KSEXP, SEXP pSEXP, SEXP wSEXP, SEXP offsetSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP lambdaSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP tau2SEXP, SEXP WtripletsumSEXP, SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP ySEXP, SEXP prior_meanbetaSEXP, SEXP prior_varbetaSEXP, SEXP prior_meantrendsSEXP, SEXP prior_vartrendsSEXP, SEXP prior_lambdaSEXP, SEXP prior_tau2SEXP, SEXP swapSEXP, SEXP tempsSEXP, SEXP beginSEXP, SEXP NtrendsSEXP, SEXP TrendSelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meanbeta(prior_meanbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_varbeta(prior_varbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meantrends(prior_meantrendsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_vartrends(prior_vartrendsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_lambda(prior_lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_tau2(prior_tau2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type swap(swapSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type temps(tempsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type begin(beginSEXP);
    Rcpp::traits::input_parameter< const int >::type Ntrends(NtrendsSEXP);
    Rcpp::traits::input_parameter< const int >::type TrendSel(TrendSelSEXP);
    rcpp_result_gen = Rcpp::wrap(poissoncouplingAllupdate(nsites, K, p, w, offset, beta, gamma, lambda, phi, rho, tau2, Wtripletsum, Wtriplet, Wbegfin, y, prior_meanbeta, prior_varbeta, prior_meantrends, prior_vartrends, prior_lambda, prior_tau2, swap, temps, begin, Ntrends, TrendSel));
    return rcpp_result_gen;
END_RCPP
}
// binomialdevfit
List binomialdevfit(NumericVector y, NumericVector trials, NumericMatrix probs, const int nsites, const int Nchains);
RcppExport SEXP _CARBayesST_binomialdevfit(SEXP ySEXP, SEXP trialsSEXP, SEXP probsSEXP, SEXP nsitesSEXP, SEXP NchainsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trials(trialsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialdevfit(y, trials, probs, nsites, Nchains));
    return rcpp_result_gen;
END_RCPP
}
// binomialbetablockupdate
NumericVector binomialbetablockupdate(const int nsites, NumericMatrix beta, NumericMatrix betaprop, NumericMatrix lp_beta, NumericMatrix lp_betaprop, NumericMatrix offset, NumericVector y, NumericVector failures, NumericVector prior_meanbeta, NumericVector prior_varbeta, const int Nchains, NumericVector temps, const int p);
RcppExport SEXP _CARBayesST_binomialbetablockupdate(SEXP nsitesSEXP, SEXP betaSEXP, SEXP betapropSEXP, SEXP lp_betaSEXP, SEXP lp_betapropSEXP, SEXP offsetSEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP prior_meanbetaSEXP, SEXP prior_varbetaSEXP, SEXP NchainsSEXP, SEXP tempsSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type betaprop(betapropSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lp_beta(lp_betaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lp_betaprop(lp_betapropSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meanbeta(prior_meanbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_varbeta(prior_varbetaSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type temps(tempsSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialbetablockupdate(nsites, beta, betaprop, lp_beta, lp_betaprop, offset, y, failures, prior_meanbeta, prior_varbeta, Nchains, temps, p));
    return rcpp_result_gen;
END_RCPP
}
// binomialgammaupdate
List binomialgammaupdate(const int nsites, NumericVector gamma, NumericVector proposal, NumericMatrix offset, NumericMatrix offset_proposal, NumericVector y, NumericVector failures, double prior_meangamma, double prior_vargamma, const int Nchains, NumericVector temps);
RcppExport SEXP _CARBayesST_binomialgammaupdate(SEXP nsitesSEXP, SEXP gammaSEXP, SEXP proposalSEXP, SEXP offsetSEXP, SEXP offset_proposalSEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP prior_meangammaSEXP, SEXP prior_vargammaSEXP, SEXP NchainsSEXP, SEXP tempsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type proposal(proposalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset_proposal(offset_proposalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< double >::type prior_meangamma(prior_meangammaSEXP);
    Rcpp::traits::input_parameter< double >::type prior_vargamma(prior_vargammaSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type temps(tempsSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialgammaupdate(nsites, gamma, proposal, offset, offset_proposal, y, failures, prior_meangamma, prior_vargamma, Nchains, temps));
    return rcpp_result_gen;
END_RCPP
}
// binomialwupdate
List binomialwupdate(const int nsites, const int ntimes, NumericMatrix w, NumericMatrix offset, NumericMatrix offset_proposal, NumericMatrix w_proposal, NumericMatrix y, NumericMatrix failures, NumericMatrix lambda, const int Nchains, NumericVector temps, NumericVector begin, NumericVector regbegin, const int Ntrends);
RcppExport SEXP _CARBayesST_binomialwupdate(SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP wSEXP, SEXP offsetSEXP, SEXP offset_proposalSEXP, SEXP w_proposalSEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP lambdaSEXP, SEXP NchainsSEXP, SEXP tempsSEXP, SEXP beginSEXP, SEXP regbeginSEXP, SEXP NtrendsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset_proposal(offset_proposalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type w_proposal(w_proposalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type temps(tempsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type begin(beginSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type regbegin(regbeginSEXP);
    Rcpp::traits::input_parameter< const int >::type Ntrends(NtrendsSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialwupdate(nsites, ntimes, w, offset, offset_proposal, w_proposal, y, failures, lambda, Nchains, temps, begin, regbegin, Ntrends));
    return rcpp_result_gen;
END_RCPP
}
// binomialphiupdate
List binomialphiupdate(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntimes, NumericMatrix phi, NumericMatrix offset, NumericMatrix y, NumericMatrix failures, NumericVector tau2, NumericVector rho, const int Nchains, NumericVector temps, NumericMatrix phi_tune, NumericVector regbegin);
RcppExport SEXP _CARBayesST_binomialphiupdate(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP phiSEXP, SEXP offsetSEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP tau2SEXP, SEXP rhoSEXP, SEXP NchainsSEXP, SEXP tempsSEXP, SEXP phi_tuneSEXP, SEXP regbeginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int >::type Nchains(NchainsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type temps(tempsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type regbegin(regbeginSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialphiupdate(Wtriplet, Wbegfin, Wtripletsum, nsites, ntimes, phi, offset, y, failures, tau2, rho, Nchains, temps, phi_tune, regbegin));
    return rcpp_result_gen;
END_RCPP
}
// binomialcouplingAllupdate
int binomialcouplingAllupdate(const int nsites, const int K, const int p, NumericMatrix w, NumericMatrix offset, NumericMatrix beta, NumericMatrix gamma, NumericMatrix lambda, NumericMatrix phi, NumericVector rho, NumericVector tau2, NumericVector Wtripletsum, NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector y, NumericVector failures, NumericVector prior_meanbeta, NumericVector prior_varbeta, NumericVector prior_meantrends, NumericVector prior_vartrends, NumericVector prior_lambda, NumericVector prior_tau2, NumericVector swap, NumericVector temps, NumericVector begin, const int Ntrends, const int TrendSel);
RcppExport SEXP _CARBayesST_binomialcouplingAllupdate(SEXP nsitesSEXP, SEXP KSEXP, SEXP pSEXP, SEXP wSEXP, SEXP offsetSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP lambdaSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP tau2SEXP, SEXP WtripletsumSEXP, SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP prior_meanbetaSEXP, SEXP prior_varbetaSEXP, SEXP prior_meantrendsSEXP, SEXP prior_vartrendsSEXP, SEXP prior_lambdaSEXP, SEXP prior_tau2SEXP, SEXP swapSEXP, SEXP tempsSEXP, SEXP beginSEXP, SEXP NtrendsSEXP, SEXP TrendSelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meanbeta(prior_meanbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_varbeta(prior_varbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meantrends(prior_meantrendsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_vartrends(prior_vartrendsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_lambda(prior_lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_tau2(prior_tau2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type swap(swapSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type temps(tempsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type begin(beginSEXP);
    Rcpp::traits::input_parameter< const int >::type Ntrends(NtrendsSEXP);
    Rcpp::traits::input_parameter< const int >::type TrendSel(TrendSelSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialcouplingAllupdate(nsites, K, p, w, offset, beta, gamma, lambda, phi, rho, tau2, Wtripletsum, Wtriplet, Wbegfin, y, failures, prior_meanbeta, prior_varbeta, prior_meantrends, prior_vartrends, prior_lambda, prior_tau2, swap, temps, begin, Ntrends, TrendSel));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CARBayesST_linpredcompute", (DL_FUNC) &_CARBayesST_linpredcompute, 5},
    {"_CARBayesST_quadform", (DL_FUNC) &_CARBayesST_quadform, 7},
    {"_CARBayesST_poissonbetaupdateMALA", (DL_FUNC) &_CARBayesST_poissonbetaupdateMALA, 11},
    {"_CARBayesST_poissonbetaupdateRW", (DL_FUNC) &_CARBayesST_poissonbetaupdateRW, 11},
    {"_CARBayesST_poissoncarupdateMALA", (DL_FUNC) &_CARBayesST_poissoncarupdateMALA, 12},
    {"_CARBayesST_poissoncarupdateRW", (DL_FUNC) &_CARBayesST_poissoncarupdateRW, 12},
    {"_CARBayesST_poissonindepupdateMALA", (DL_FUNC) &_CARBayesST_poissonindepupdateMALA, 6},
    {"_CARBayesST_poissonindepupdateRW", (DL_FUNC) &_CARBayesST_poissonindepupdateRW, 6},
    {"_CARBayesST_zipcarupdateMALA", (DL_FUNC) &_CARBayesST_zipcarupdateMALA, 13},
    {"_CARBayesST_zipcarupdateRW", (DL_FUNC) &_CARBayesST_zipcarupdateRW, 13},
    {"_CARBayesST_zipindepupdateMALA", (DL_FUNC) &_CARBayesST_zipindepupdateMALA, 7},
    {"_CARBayesST_zipindepupdateRW", (DL_FUNC) &_CARBayesST_zipindepupdateRW, 7},
    {"_CARBayesST_binomialbetaupdateMALA", (DL_FUNC) &_CARBayesST_binomialbetaupdateMALA, 13},
    {"_CARBayesST_binomialbetaupdateRW", (DL_FUNC) &_CARBayesST_binomialbetaupdateRW, 12},
    {"_CARBayesST_binomialindepupdateMALA", (DL_FUNC) &_CARBayesST_binomialindepupdateMALA, 8},
    {"_CARBayesST_binomialindepupdateRW", (DL_FUNC) &_CARBayesST_binomialindepupdateRW, 7},
    {"_CARBayesST_binomialcarupdateMALA", (DL_FUNC) &_CARBayesST_binomialcarupdateMALA, 14},
    {"_CARBayesST_binomialcarupdateRW", (DL_FUNC) &_CARBayesST_binomialcarupdateRW, 13},
    {"_CARBayesST_gaussiancarupdate", (DL_FUNC) &_CARBayesST_gaussiancarupdate, 10},
    {"_CARBayesST_poissonarcarupdateMALA", (DL_FUNC) &_CARBayesST_poissonarcarupdateMALA, 13},
    {"_CARBayesST_poissonarcarupdateRW", (DL_FUNC) &_CARBayesST_poissonarcarupdateRW, 13},
    {"_CARBayesST_ziparcarupdateMALA", (DL_FUNC) &_CARBayesST_ziparcarupdateMALA, 14},
    {"_CARBayesST_ziparcarupdateRW", (DL_FUNC) &_CARBayesST_ziparcarupdateRW, 14},
    {"_CARBayesST_gammaquadformcompute", (DL_FUNC) &_CARBayesST_gammaquadformcompute, 7},
    {"_CARBayesST_tauquadformcompute", (DL_FUNC) &_CARBayesST_tauquadformcompute, 8},
    {"_CARBayesST_binomialarcarupdateMALA", (DL_FUNC) &_CARBayesST_binomialarcarupdateMALA, 15},
    {"_CARBayesST_binomialarcarupdateRW", (DL_FUNC) &_CARBayesST_binomialarcarupdateRW, 14},
    {"_CARBayesST_gaussianarcarupdate", (DL_FUNC) &_CARBayesST_gaussianarcarupdate, 12},
    {"_CARBayesST_qform", (DL_FUNC) &_CARBayesST_qform, 2},
    {"_CARBayesST_qform_asym", (DL_FUNC) &_CARBayesST_qform_asym, 3},
    {"_CARBayesST_qformSPACETIME", (DL_FUNC) &_CARBayesST_qformSPACETIME, 4},
    {"_CARBayesST_SPTICARphiGaussian", (DL_FUNC) &_CARBayesST_SPTICARphiGaussian, 10},
    {"_CARBayesST_qform_difference_ST", (DL_FUNC) &_CARBayesST_qform_difference_ST, 4},
    {"_CARBayesST_qform_ST", (DL_FUNC) &_CARBayesST_qform_ST, 4},
    {"_CARBayesST_qform_ST_asym", (DL_FUNC) &_CARBayesST_qform_ST_asym, 5},
    {"_CARBayesST_update_Qtime", (DL_FUNC) &_CARBayesST_update_Qtime, 3},
    {"_CARBayesST_updatetriplets_rho", (DL_FUNC) &_CARBayesST_updatetriplets_rho, 5},
    {"_CARBayesST_updatetripList2", (DL_FUNC) &_CARBayesST_updatetripList2, 9},
    {"_CARBayesST_Zupdatesqbin", (DL_FUNC) &_CARBayesST_Zupdatesqbin, 12},
    {"_CARBayesST_Zupdatesqpoi", (DL_FUNC) &_CARBayesST_Zupdatesqpoi, 11},
    {"_CARBayesST_Zupdatesqgau", (DL_FUNC) &_CARBayesST_Zupdatesqgau, 11},
    {"_CARBayesST_tau2compute", (DL_FUNC) &_CARBayesST_tau2compute, 5},
    {"_CARBayesST_rhoquadformcompute", (DL_FUNC) &_CARBayesST_rhoquadformcompute, 8},
    {"_CARBayesST_binomialsrecarupdateMALA", (DL_FUNC) &_CARBayesST_binomialsrecarupdateMALA, 14},
    {"_CARBayesST_binomialsrecarupdateRW", (DL_FUNC) &_CARBayesST_binomialsrecarupdateRW, 13},
    {"_CARBayesST_poissonsrecarupdateMALA", (DL_FUNC) &_CARBayesST_poissonsrecarupdateMALA, 12},
    {"_CARBayesST_poissonsrecarupdateRW", (DL_FUNC) &_CARBayesST_poissonsrecarupdateRW, 12},
    {"_CARBayesST_tauquadformcompute2", (DL_FUNC) &_CARBayesST_tauquadformcompute2, 7},
    {"_CARBayesST_SPTICARphiVarbMALA", (DL_FUNC) &_CARBayesST_SPTICARphiVarbMALA, 11},
    {"_CARBayesST_SPTICARphiBinomialMALA", (DL_FUNC) &_CARBayesST_SPTICARphiBinomialMALA, 11},
    {"_CARBayesST_SPTICARphiBinomial", (DL_FUNC) &_CARBayesST_SPTICARphiBinomial, 11},
    {"_CARBayesST_SPTICARphiVarb", (DL_FUNC) &_CARBayesST_SPTICARphiVarb, 11},
    {"_CARBayesST_tempupdate", (DL_FUNC) &_CARBayesST_tempupdate, 2},
    {"_CARBayesST_matcomp", (DL_FUNC) &_CARBayesST_matcomp, 5},
    {"_CARBayesST_offsetcompute", (DL_FUNC) &_CARBayesST_offsetcompute, 7},
    {"_CARBayesST_matN", (DL_FUNC) &_CARBayesST_matN, 3},
    {"_CARBayesST_linpredcomputeNchains", (DL_FUNC) &_CARBayesST_linpredcomputeNchains, 5},
    {"_CARBayesST_gammaproposal", (DL_FUNC) &_CARBayesST_gammaproposal, 7},
    {"_CARBayesST_lambdaupdate", (DL_FUNC) &_CARBayesST_lambdaupdate, 2},
    {"_CARBayesST_tau2quadform", (DL_FUNC) &_CARBayesST_tau2quadform, 8},
    {"_CARBayesST_tau2computeNchains", (DL_FUNC) &_CARBayesST_tau2computeNchains, 4},
    {"_CARBayesST_rhoquadformcomputeNchains", (DL_FUNC) &_CARBayesST_rhoquadformcomputeNchains, 8},
    {"_CARBayesST_Qdet", (DL_FUNC) &_CARBayesST_Qdet, 3},
    {"_CARBayesST_poissondevfit", (DL_FUNC) &_CARBayesST_poissondevfit, 4},
    {"_CARBayesST_poissonbetablockupdate", (DL_FUNC) &_CARBayesST_poissonbetablockupdate, 12},
    {"_CARBayesST_poissongammaupdate", (DL_FUNC) &_CARBayesST_poissongammaupdate, 10},
    {"_CARBayesST_poissonwupdate", (DL_FUNC) &_CARBayesST_poissonwupdate, 13},
    {"_CARBayesST_poissonphiupdate", (DL_FUNC) &_CARBayesST_poissonphiupdate, 14},
    {"_CARBayesST_poissoncouplingAllupdate", (DL_FUNC) &_CARBayesST_poissoncouplingAllupdate, 26},
    {"_CARBayesST_binomialdevfit", (DL_FUNC) &_CARBayesST_binomialdevfit, 5},
    {"_CARBayesST_binomialbetablockupdate", (DL_FUNC) &_CARBayesST_binomialbetablockupdate, 13},
    {"_CARBayesST_binomialgammaupdate", (DL_FUNC) &_CARBayesST_binomialgammaupdate, 11},
    {"_CARBayesST_binomialwupdate", (DL_FUNC) &_CARBayesST_binomialwupdate, 14},
    {"_CARBayesST_binomialphiupdate", (DL_FUNC) &_CARBayesST_binomialphiupdate, 15},
    {"_CARBayesST_binomialcouplingAllupdate", (DL_FUNC) &_CARBayesST_binomialcouplingAllupdate, 27},
    {NULL, NULL, 0}
};

RcppExport void R_init_CARBayesST(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
