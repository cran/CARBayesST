// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// linpredcompute
NumericVector linpredcompute(NumericMatrix X, const int nsites, const int p, NumericVector beta, NumericVector offset);
RcppExport SEXP CARBayesST_linpredcompute(SEXP XSEXP, SEXP nsitesSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    __result = Rcpp::wrap(linpredcompute(X, nsites, p, beta, offset));
    return __result;
END_RCPP
}
// quadform
double quadform(NumericMatrix Wtriplet, NumericVector Wtripletsum, const int n_triplet, const int nsites, NumericVector phi, NumericVector theta, double rho);
RcppExport SEXP CARBayesST_quadform(SEXP WtripletSEXP, SEXP WtripletsumSEXP, SEXP n_tripletSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP thetaSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type n_triplet(n_tripletSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    __result = Rcpp::wrap(quadform(Wtriplet, Wtripletsum, n_triplet, nsites, phi, theta, rho));
    return __result;
END_RCPP
}
// poissonbetaupdateMALA
List poissonbetaupdateMALA(NumericMatrix X, const int nsites, const int p, NumericVector beta, NumericVector offset, NumericVector y, NumericVector prior_meanbeta, NumericVector prior_varbeta, NumericVector missind, const int nblock, double beta_tune, List block_list);
RcppExport SEXP CARBayesST_poissonbetaupdateMALA(SEXP XSEXP, SEXP nsitesSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP offsetSEXP, SEXP ySEXP, SEXP prior_meanbetaSEXP, SEXP prior_varbetaSEXP, SEXP missindSEXP, SEXP nblockSEXP, SEXP beta_tuneSEXP, SEXP block_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meanbeta(prior_meanbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_varbeta(prior_varbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type missind(missindSEXP);
    Rcpp::traits::input_parameter< const int >::type nblock(nblockSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tune(beta_tuneSEXP);
    Rcpp::traits::input_parameter< List >::type block_list(block_listSEXP);
    __result = Rcpp::wrap(poissonbetaupdateMALA(X, nsites, p, beta, offset, y, prior_meanbeta, prior_varbeta, missind, nblock, beta_tune, block_list));
    return __result;
END_RCPP
}
// poissonbetaupdateRW
List poissonbetaupdateRW(NumericMatrix X, const int nsites, const int p, NumericVector beta, NumericVector offset, NumericVector y, NumericVector prior_meanbeta, NumericVector prior_varbeta, NumericVector missind, double beta_tune);
RcppExport SEXP CARBayesST_poissonbetaupdateRW(SEXP XSEXP, SEXP nsitesSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP offsetSEXP, SEXP ySEXP, SEXP prior_meanbetaSEXP, SEXP prior_varbetaSEXP, SEXP missindSEXP, SEXP beta_tuneSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meanbeta(prior_meanbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_varbeta(prior_varbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type missind(missindSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tune(beta_tuneSEXP);
    __result = Rcpp::wrap(poissonbetaupdateRW(X, nsites, p, beta, offset, y, prior_meanbeta, prior_varbeta, missind, beta_tune));
    return __result;
END_RCPP
}
// poissoncarupdateMALA
List poissoncarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, NumericVector phi, double tau2, const NumericMatrix y, const double phi_tune, double rho, NumericMatrix offset, const int ntime, NumericVector mult_offset, NumericMatrix missind);
RcppExport SEXP CARBayesST_poissoncarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP phi_tuneSEXP, SEXP rhoSEXP, SEXP offsetSEXP, SEXP ntimeSEXP, SEXP mult_offsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mult_offset(mult_offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type missind(missindSEXP);
    __result = Rcpp::wrap(poissoncarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, phi, tau2, y, phi_tune, rho, offset, ntime, mult_offset, missind));
    return __result;
END_RCPP
}
// poissoncarupdateRW
List poissoncarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, NumericVector phi, double tau2, const NumericMatrix y, const double phi_tune, double rho, NumericMatrix offset, const int ntime, NumericVector mult_offset, NumericMatrix missind);
RcppExport SEXP CARBayesST_poissoncarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP phi_tuneSEXP, SEXP rhoSEXP, SEXP offsetSEXP, SEXP ntimeSEXP, SEXP mult_offsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mult_offset(mult_offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type missind(missindSEXP);
    __result = Rcpp::wrap(poissoncarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, phi, tau2, y, phi_tune, rho, offset, ntime, mult_offset, missind));
    return __result;
END_RCPP
}
// poissonindepupdateMALA
List poissonindepupdateMALA(const int nsites, NumericVector theta, double sigma2, const NumericVector y, const double theta_tune, NumericVector offset, NumericVector missind);
RcppExport SEXP CARBayesST_poissonindepupdateMALA(SEXP nsitesSEXP, SEXP thetaSEXP, SEXP sigma2SEXP, SEXP ySEXP, SEXP theta_tuneSEXP, SEXP offsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type theta_tune(theta_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type missind(missindSEXP);
    __result = Rcpp::wrap(poissonindepupdateMALA(nsites, theta, sigma2, y, theta_tune, offset, missind));
    return __result;
END_RCPP
}
// poissonindepupdateRW
List poissonindepupdateRW(const int nsites, NumericVector theta, double tau2, const NumericVector y, const double theta_tune, NumericVector offset, NumericVector missind);
RcppExport SEXP CARBayesST_poissonindepupdateRW(SEXP nsitesSEXP, SEXP thetaSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP theta_tuneSEXP, SEXP offsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type theta_tune(theta_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type missind(missindSEXP);
    __result = Rcpp::wrap(poissonindepupdateRW(nsites, theta, tau2, y, theta_tune, offset, missind));
    return __result;
END_RCPP
}
// binomialbetaupdateMALA
List binomialbetaupdateMALA(NumericMatrix X, const int nsites, const int p, NumericVector beta, NumericVector offset, NumericVector y, NumericVector failures, NumericVector trials, NumericVector prior_meanbeta, NumericVector prior_varbeta, NumericVector missind, const int nblock, double beta_tune, List block_list);
RcppExport SEXP CARBayesST_binomialbetaupdateMALA(SEXP XSEXP, SEXP nsitesSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP offsetSEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP trialsSEXP, SEXP prior_meanbetaSEXP, SEXP prior_varbetaSEXP, SEXP missindSEXP, SEXP nblockSEXP, SEXP beta_tuneSEXP, SEXP block_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trials(trialsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meanbeta(prior_meanbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_varbeta(prior_varbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type missind(missindSEXP);
    Rcpp::traits::input_parameter< const int >::type nblock(nblockSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tune(beta_tuneSEXP);
    Rcpp::traits::input_parameter< List >::type block_list(block_listSEXP);
    __result = Rcpp::wrap(binomialbetaupdateMALA(X, nsites, p, beta, offset, y, failures, trials, prior_meanbeta, prior_varbeta, missind, nblock, beta_tune, block_list));
    return __result;
END_RCPP
}
// binomialbetaupdateRW
List binomialbetaupdateRW(NumericMatrix X, const int nsites, const int p, NumericVector beta, NumericVector offset, NumericVector y, NumericVector failures, NumericVector prior_meanbeta, NumericVector prior_varbeta, NumericVector missind, double beta_tune);
RcppExport SEXP CARBayesST_binomialbetaupdateRW(SEXP XSEXP, SEXP nsitesSEXP, SEXP pSEXP, SEXP betaSEXP, SEXP offsetSEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP prior_meanbetaSEXP, SEXP prior_varbetaSEXP, SEXP missindSEXP, SEXP beta_tuneSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_meanbeta(prior_meanbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior_varbeta(prior_varbetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type missind(missindSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tune(beta_tuneSEXP);
    __result = Rcpp::wrap(binomialbetaupdateRW(X, nsites, p, beta, offset, y, failures, prior_meanbeta, prior_varbeta, missind, beta_tune));
    return __result;
END_RCPP
}
// binomialindepupdateMALA
List binomialindepupdateMALA(const int nsites, NumericVector theta, double sigma2, const NumericVector y, const NumericVector failures, const NumericVector trials, const double theta_tune, NumericVector offset, NumericVector missind);
RcppExport SEXP CARBayesST_binomialindepupdateMALA(SEXP nsitesSEXP, SEXP thetaSEXP, SEXP sigma2SEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP trialsSEXP, SEXP theta_tuneSEXP, SEXP offsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type trials(trialsSEXP);
    Rcpp::traits::input_parameter< const double >::type theta_tune(theta_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type missind(missindSEXP);
    __result = Rcpp::wrap(binomialindepupdateMALA(nsites, theta, sigma2, y, failures, trials, theta_tune, offset, missind));
    return __result;
END_RCPP
}
// binomialindepupdateRW
List binomialindepupdateRW(const int nsites, NumericVector theta, double tau2, const NumericVector y, const NumericVector failures, const double theta_tune, NumericVector offset, NumericVector missind);
RcppExport SEXP CARBayesST_binomialindepupdateRW(SEXP nsitesSEXP, SEXP thetaSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP theta_tuneSEXP, SEXP offsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< const double >::type theta_tune(theta_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type missind(missindSEXP);
    __result = Rcpp::wrap(binomialindepupdateRW(nsites, theta, tau2, y, failures, theta_tune, offset, missind));
    return __result;
END_RCPP
}
// binomialcarupdateMALA
List binomialcarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, NumericVector phi, double tau2, const NumericMatrix y, const NumericMatrix failures, const NumericMatrix trials, const double phi_tune, double rho, NumericMatrix offset, const int ntime, NumericVector mult_offset, NumericMatrix missind);
RcppExport SEXP CARBayesST_binomialcarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP trialsSEXP, SEXP phi_tuneSEXP, SEXP rhoSEXP, SEXP offsetSEXP, SEXP ntimeSEXP, SEXP mult_offsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type trials(trialsSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mult_offset(mult_offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type missind(missindSEXP);
    __result = Rcpp::wrap(binomialcarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, phi, tau2, y, failures, trials, phi_tune, rho, offset, ntime, mult_offset, missind));
    return __result;
END_RCPP
}
// binomialcarupdateRW
List binomialcarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, NumericVector phi, double tau2, const NumericMatrix y, const NumericMatrix failures, const double phi_tune, double rho, NumericMatrix offset, const int ntime, NumericVector mult_offset, NumericMatrix missind);
RcppExport SEXP CARBayesST_binomialcarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP phi_tuneSEXP, SEXP rhoSEXP, SEXP offsetSEXP, SEXP ntimeSEXP, SEXP mult_offsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mult_offset(mult_offsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type missind(missindSEXP);
    __result = Rcpp::wrap(binomialcarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, phi, tau2, y, failures, phi_tune, rho, offset, ntime, mult_offset, missind));
    return __result;
END_RCPP
}
// gaussiancarupdate
NumericVector gaussiancarupdate(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, NumericVector phi, double tau2, double nu2, const NumericVector offset, double rho, NumericVector ntime);
RcppExport SEXP CARBayesST_gaussiancarupdate(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP nu2SEXP, SEXP offsetSEXP, SEXP rhoSEXP, SEXP ntimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type nu2(nu2SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ntime(ntimeSEXP);
    __result = Rcpp::wrap(gaussiancarupdate(Wtriplet, Wbegfin, Wtripletsum, nsites, phi, tau2, nu2, offset, rho, ntime));
    return __result;
END_RCPP
}
// poissonarcarupdateMALA
List poissonarcarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double tau2, double gamma, double rho, const NumericMatrix ymat, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericMatrix missind);
RcppExport SEXP CARBayesST_poissonarcarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type missind(missindSEXP);
    __result = Rcpp::wrap(poissonarcarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, tau2, gamma, rho, ymat, phi_tune, offset, denoffset, missind));
    return __result;
END_RCPP
}
// poissonarcarupdateRW
List poissonarcarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double tau2, double gamma, double rho, const NumericMatrix ymat, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericMatrix missind);
RcppExport SEXP CARBayesST_poissonarcarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type missind(missindSEXP);
    __result = Rcpp::wrap(poissonarcarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, tau2, gamma, rho, ymat, phi_tune, offset, denoffset, missind));
    return __result;
END_RCPP
}
// gammaquadformcompute
List gammaquadformcompute(NumericMatrix Wtriplet, NumericVector Wtripletsum, const int n_triplet, const int nsites, const int ntime, NumericMatrix phi, double rho);
RcppExport SEXP CARBayesST_gammaquadformcompute(SEXP WtripletSEXP, SEXP WtripletsumSEXP, SEXP n_tripletSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type n_triplet(n_tripletSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    __result = Rcpp::wrap(gammaquadformcompute(Wtriplet, Wtripletsum, n_triplet, nsites, ntime, phi, rho));
    return __result;
END_RCPP
}
// tauquadformcompute
double tauquadformcompute(NumericMatrix Wtriplet, NumericVector Wtripletsum, const int n_triplet, const int nsites, const int ntime, NumericMatrix phi, double rho, double gamma);
RcppExport SEXP CARBayesST_tauquadformcompute(SEXP WtripletSEXP, SEXP WtripletsumSEXP, SEXP n_tripletSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type n_triplet(n_tripletSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    __result = Rcpp::wrap(tauquadformcompute(Wtriplet, Wtripletsum, n_triplet, nsites, ntime, phi, rho, gamma));
    return __result;
END_RCPP
}
// binomialarcarupdateMALA
List binomialarcarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double tau2, double gamma, double rho, const NumericMatrix ymat, const NumericMatrix failuresmat, const NumericMatrix trialsmat, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericMatrix missind);
RcppExport SEXP CARBayesST_binomialarcarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP failuresmatSEXP, SEXP trialsmatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type failuresmat(failuresmatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type trialsmat(trialsmatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type missind(missindSEXP);
    __result = Rcpp::wrap(binomialarcarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, tau2, gamma, rho, ymat, failuresmat, trialsmat, phi_tune, offset, denoffset, missind));
    return __result;
END_RCPP
}
// binomialarcarupdateRW
List binomialarcarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double tau2, double gamma, double rho, const NumericMatrix ymat, const NumericMatrix failuresmat, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericMatrix missind);
RcppExport SEXP CARBayesST_binomialarcarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP failuresmatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type failuresmat(failuresmatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type missind(missindSEXP);
    __result = Rcpp::wrap(binomialarcarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, tau2, gamma, rho, ymat, failuresmat, phi_tune, offset, denoffset, missind));
    return __result;
END_RCPP
}
// gaussianarcarupdate
NumericMatrix gaussianarcarupdate(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double tau2, double nu2, double gamma, double rho, NumericMatrix offset, NumericVector denoffset, NumericMatrix missind);
RcppExport SEXP CARBayesST_gaussianarcarupdate(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP tau2SEXP, SEXP nu2SEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP missindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type nu2(nu2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type missind(missindSEXP);
    __result = Rcpp::wrap(gaussianarcarupdate(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, tau2, nu2, gamma, rho, offset, denoffset, missind));
    return __result;
END_RCPP
}
// qform
double qform(NumericMatrix Qtrip, NumericVector phi);
RcppExport SEXP CARBayesST_qform(SEXP QtripSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtrip(QtripSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    __result = Rcpp::wrap(qform(Qtrip, phi));
    return __result;
END_RCPP
}
// qform_asym
double qform_asym(NumericMatrix Qtrip, NumericVector phi1, NumericVector phi2);
RcppExport SEXP CARBayesST_qform_asym(SEXP QtripSEXP, SEXP phi1SEXP, SEXP phi2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtrip(QtripSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi1(phi1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi2(phi2SEXP);
    __result = Rcpp::wrap(qform_asym(Qtrip, phi1, phi2));
    return __result;
END_RCPP
}
// qformSPACETIME
double qformSPACETIME(NumericMatrix Qtrip, NumericVector phi, const int ntime, const int nsite);
RcppExport SEXP CARBayesST_qformSPACETIME(SEXP QtripSEXP, SEXP phiSEXP, SEXP ntimeSEXP, SEXP nsiteSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtrip(QtripSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const int >::type nsite(nsiteSEXP);
    __result = Rcpp::wrap(qformSPACETIME(Qtrip, phi, ntime, nsite));
    return __result;
END_RCPP
}
// SPTICARphiGaussian
List SPTICARphiGaussian(NumericMatrix W, const int nsites, const int ntimes, NumericVector phi, NumericVector nneighbours, double tau, double lik_var, const NumericVector y, double alpha, NumericVector XB);
RcppExport SEXP CARBayesST_SPTICARphiGaussian(SEXP WSEXP, SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP phiSEXP, SEXP nneighboursSEXP, SEXP tauSEXP, SEXP lik_varSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP XBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nneighbours(nneighboursSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lik_var(lik_varSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type XB(XBSEXP);
    __result = Rcpp::wrap(SPTICARphiGaussian(W, nsites, ntimes, phi, nneighbours, tau, lik_var, y, alpha, XB));
    return __result;
END_RCPP
}
// qform_difference_ST
double qform_difference_ST(NumericMatrix Qtrip, NumericMatrix Qtime, NumericVector phi, int nsites);
RcppExport SEXP CARBayesST_qform_difference_ST(SEXP QtripSEXP, SEXP QtimeSEXP, SEXP phiSEXP, SEXP nsitesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtrip(QtripSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtime(QtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type nsites(nsitesSEXP);
    __result = Rcpp::wrap(qform_difference_ST(Qtrip, Qtime, phi, nsites));
    return __result;
END_RCPP
}
// qform_ST
double qform_ST(NumericMatrix Qspace, NumericMatrix Qtime, NumericVector phi, int nsites);
RcppExport SEXP CARBayesST_qform_ST(SEXP QspaceSEXP, SEXP QtimeSEXP, SEXP phiSEXP, SEXP nsitesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qspace(QspaceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtime(QtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type nsites(nsitesSEXP);
    __result = Rcpp::wrap(qform_ST(Qspace, Qtime, phi, nsites));
    return __result;
END_RCPP
}
// qform_ST_asym
double qform_ST_asym(NumericMatrix Qspace, NumericMatrix Qtime, NumericVector phi1, NumericVector phi2, int nsites);
RcppExport SEXP CARBayesST_qform_ST_asym(SEXP QspaceSEXP, SEXP QtimeSEXP, SEXP phi1SEXP, SEXP phi2SEXP, SEXP nsitesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qspace(QspaceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtime(QtimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi1(phi1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi2(phi2SEXP);
    Rcpp::traits::input_parameter< int >::type nsites(nsitesSEXP);
    __result = Rcpp::wrap(qform_ST_asym(Qspace, Qtime, phi1, phi2, nsites));
    return __result;
END_RCPP
}
// update_Qtime
NumericMatrix update_Qtime(NumericMatrix Qtime, double alpha, int rowNumberLastDiag);
RcppExport SEXP CARBayesST_update_Qtime(SEXP QtimeSEXP, SEXP alphaSEXP, SEXP rowNumberLastDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Qtime(QtimeSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type rowNumberLastDiag(rowNumberLastDiagSEXP);
    __result = Rcpp::wrap(update_Qtime(Qtime, alpha, rowNumberLastDiag));
    return __result;
END_RCPP
}
// updatetriplets_rho
NumericMatrix updatetriplets_rho(NumericMatrix trips, int nsites, double rho_old, double rho_new, double fixedridge);
RcppExport SEXP CARBayesST_updatetriplets_rho(SEXP tripsSEXP, SEXP nsitesSEXP, SEXP rho_oldSEXP, SEXP rho_newSEXP, SEXP fixedridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type trips(tripsSEXP);
    Rcpp::traits::input_parameter< int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< double >::type rho_old(rho_oldSEXP);
    Rcpp::traits::input_parameter< double >::type rho_new(rho_newSEXP);
    Rcpp::traits::input_parameter< double >::type fixedridge(fixedridgeSEXP);
    __result = Rcpp::wrap(updatetriplets_rho(trips, nsites, rho_old, rho_new, fixedridge));
    return __result;
END_RCPP
}
// updatetripList2
List updatetripList2(NumericMatrix trips, NumericVector vold, NumericVector vnew, const int nedges, int nsites, IntegerVector block, int block_length, double rho, double fixedridge);
RcppExport SEXP CARBayesST_updatetripList2(SEXP tripsSEXP, SEXP voldSEXP, SEXP vnewSEXP, SEXP nedgesSEXP, SEXP nsitesSEXP, SEXP blockSEXP, SEXP block_lengthSEXP, SEXP rhoSEXP, SEXP fixedridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type trips(tripsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vold(voldSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vnew(vnewSEXP);
    Rcpp::traits::input_parameter< const int >::type nedges(nedgesSEXP);
    Rcpp::traits::input_parameter< int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type block(blockSEXP);
    Rcpp::traits::input_parameter< int >::type block_length(block_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type fixedridge(fixedridgeSEXP);
    __result = Rcpp::wrap(updatetripList2(trips, vold, vnew, nedges, nsites, block, block_length, rho, fixedridge));
    return __result;
END_RCPP
}
// Zupdatesqbin
NumericMatrix Zupdatesqbin(NumericMatrix Z, NumericMatrix Offset, NumericMatrix Y, const double delta, NumericVector lambda, const int nsites, const int ntime, const int G, NumericVector SS, NumericVector prioroffset, const double Gstar, NumericMatrix failures);
RcppExport SEXP CARBayesST_Zupdatesqbin(SEXP ZSEXP, SEXP OffsetSEXP, SEXP YSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP GSEXP, SEXP SSSEXP, SEXP prioroffsetSEXP, SEXP GstarSEXP, SEXP failuresSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Offset(OffsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prioroffset(prioroffsetSEXP);
    Rcpp::traits::input_parameter< const double >::type Gstar(GstarSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type failures(failuresSEXP);
    __result = Rcpp::wrap(Zupdatesqbin(Z, Offset, Y, delta, lambda, nsites, ntime, G, SS, prioroffset, Gstar, failures));
    return __result;
END_RCPP
}
// Zupdatesqpoi
NumericMatrix Zupdatesqpoi(NumericMatrix Z, NumericMatrix Offset, NumericMatrix Y, const double delta, NumericVector lambda, const int nsites, const int ntime, const int G, NumericVector SS, NumericVector prioroffset, const double Gstar);
RcppExport SEXP CARBayesST_Zupdatesqpoi(SEXP ZSEXP, SEXP OffsetSEXP, SEXP YSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP GSEXP, SEXP SSSEXP, SEXP prioroffsetSEXP, SEXP GstarSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Offset(OffsetSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prioroffset(prioroffsetSEXP);
    Rcpp::traits::input_parameter< const double >::type Gstar(GstarSEXP);
    __result = Rcpp::wrap(Zupdatesqpoi(Z, Offset, Y, delta, lambda, nsites, ntime, G, SS, prioroffset, Gstar));
    return __result;
END_RCPP
}
// Zupdatesqgau
NumericMatrix Zupdatesqgau(NumericMatrix Z, NumericMatrix Offset, const double delta, NumericVector lambda, const int nsites, const int ntime, const int G, NumericVector SS, NumericVector prioroffset, const double Gstar, const double nu2);
RcppExport SEXP CARBayesST_Zupdatesqgau(SEXP ZSEXP, SEXP OffsetSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP GSEXP, SEXP SSSEXP, SEXP prioroffsetSEXP, SEXP GstarSEXP, SEXP nu2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Offset(OffsetSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prioroffset(prioroffsetSEXP);
    Rcpp::traits::input_parameter< const double >::type Gstar(GstarSEXP);
    Rcpp::traits::input_parameter< const double >::type nu2(nu2SEXP);
    __result = Rcpp::wrap(Zupdatesqgau(Z, Offset, delta, lambda, nsites, ntime, G, SS, prioroffset, Gstar, nu2));
    return __result;
END_RCPP
}
// tau2compute
NumericVector tau2compute(NumericVector tau2, NumericVector temp, const double tau2_shape, const double prior_tau2, const int N);
RcppExport SEXP CARBayesST_tau2compute(SEXP tau2SEXP, SEXP tempSEXP, SEXP tau2_shapeSEXP, SEXP prior_tau2SEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< const double >::type tau2_shape(tau2_shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_tau2(prior_tau2SEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    __result = Rcpp::wrap(tau2compute(tau2, temp, tau2_shape, prior_tau2, N));
    return __result;
END_RCPP
}
// rhoquadformcompute
double rhoquadformcompute(NumericMatrix Wtriplet, NumericVector Wtripletsum, const int n_triplet, const int nsites, const int ntime, NumericMatrix phi, double rho, NumericVector tau2);
RcppExport SEXP CARBayesST_rhoquadformcompute(SEXP WtripletSEXP, SEXP WtripletsumSEXP, SEXP n_tripletSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type n_triplet(n_tripletSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    __result = Rcpp::wrap(rhoquadformcompute(Wtriplet, Wtripletsum, n_triplet, nsites, ntime, phi, rho, tau2));
    return __result;
END_RCPP
}
// binomialsrecarupdateMALA
List binomialsrecarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double rho, const NumericMatrix y, const NumericMatrix failures, NumericMatrix trials, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericVector tau2);
RcppExport SEXP CARBayesST_binomialsrecarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP ySEXP, SEXP failuresSEXP, SEXP trialsSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type failures(failuresSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type trials(trialsSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    __result = Rcpp::wrap(binomialsrecarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, rho, y, failures, trials, phi_tune, offset, denoffset, tau2));
    return __result;
END_RCPP
}
// binomialsrecarupdateRW
List binomialsrecarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double rho, const NumericMatrix ymat, const NumericMatrix failuresmat, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericVector tau2);
RcppExport SEXP CARBayesST_binomialsrecarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP failuresmatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type failuresmat(failuresmatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    __result = Rcpp::wrap(binomialsrecarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, rho, ymat, failuresmat, phi_tune, offset, denoffset, tau2));
    return __result;
END_RCPP
}
// poissonsrecarupdateMALA
List poissonsrecarupdateMALA(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double rho, const NumericMatrix ymat, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericVector tau2);
RcppExport SEXP CARBayesST_poissonsrecarupdateMALA(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    __result = Rcpp::wrap(poissonsrecarupdateMALA(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, rho, ymat, phi_tune, offset, denoffset, tau2));
    return __result;
END_RCPP
}
// poissonsrecarupdateRW
List poissonsrecarupdateRW(NumericMatrix Wtriplet, NumericMatrix Wbegfin, NumericVector Wtripletsum, const int nsites, const int ntime, NumericMatrix phi, double rho, const NumericMatrix ymat, const double phi_tune, NumericMatrix offset, NumericVector denoffset, NumericVector tau2);
RcppExport SEXP CARBayesST_poissonsrecarupdateRW(SEXP WtripletSEXP, SEXP WbegfinSEXP, SEXP WtripletsumSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP ymatSEXP, SEXP phi_tuneSEXP, SEXP offsetSEXP, SEXP denoffsetSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wbegfin(WbegfinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const double >::type phi_tune(phi_tuneSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type denoffset(denoffsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau2(tau2SEXP);
    __result = Rcpp::wrap(poissonsrecarupdateRW(Wtriplet, Wbegfin, Wtripletsum, nsites, ntime, phi, rho, ymat, phi_tune, offset, denoffset, tau2));
    return __result;
END_RCPP
}
// tauquadformcompute2
NumericVector tauquadformcompute2(NumericMatrix Wtriplet, NumericVector Wtripletsum, const int n_triplet, const int nsites, const int ntime, NumericMatrix phi, double rho);
RcppExport SEXP CARBayesST_tauquadformcompute2(SEXP WtripletSEXP, SEXP WtripletsumSEXP, SEXP n_tripletSEXP, SEXP nsitesSEXP, SEXP ntimeSEXP, SEXP phiSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Wtriplet(WtripletSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wtripletsum(WtripletsumSEXP);
    Rcpp::traits::input_parameter< const int >::type n_triplet(n_tripletSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntime(ntimeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    __result = Rcpp::wrap(tauquadformcompute2(Wtriplet, Wtripletsum, n_triplet, nsites, ntime, phi, rho));
    return __result;
END_RCPP
}
// SPTICARphiVarbMALA
List SPTICARphiVarbMALA(NumericMatrix W, const int nsites, const int ntimes, NumericVector phiVarb, NumericVector nneighbours, double tau, const NumericVector y, const NumericVector E, const double phiVarb_tune, double alpha, NumericVector XB);
RcppExport SEXP CARBayesST_SPTICARphiVarbMALA(SEXP WSEXP, SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP phiVarbSEXP, SEXP nneighboursSEXP, SEXP tauSEXP, SEXP ySEXP, SEXP ESEXP, SEXP phiVarb_tuneSEXP, SEXP alphaSEXP, SEXP XBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phiVarb(phiVarbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nneighbours(nneighboursSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type E(ESEXP);
    Rcpp::traits::input_parameter< const double >::type phiVarb_tune(phiVarb_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type XB(XBSEXP);
    __result = Rcpp::wrap(SPTICARphiVarbMALA(W, nsites, ntimes, phiVarb, nneighbours, tau, y, E, phiVarb_tune, alpha, XB));
    return __result;
END_RCPP
}
// SPTICARphiBinomialMALA
List SPTICARphiBinomialMALA(NumericMatrix W, const int nsites, const int ntimes, NumericVector phi, NumericVector nneighbours, double tau, const NumericVector y, double alpha, NumericVector XB, const double phiVarb_tune, NumericVector trials);
RcppExport SEXP CARBayesST_SPTICARphiBinomialMALA(SEXP WSEXP, SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP phiSEXP, SEXP nneighboursSEXP, SEXP tauSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP XBSEXP, SEXP phiVarb_tuneSEXP, SEXP trialsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nneighbours(nneighboursSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type XB(XBSEXP);
    Rcpp::traits::input_parameter< const double >::type phiVarb_tune(phiVarb_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trials(trialsSEXP);
    __result = Rcpp::wrap(SPTICARphiBinomialMALA(W, nsites, ntimes, phi, nneighbours, tau, y, alpha, XB, phiVarb_tune, trials));
    return __result;
END_RCPP
}
// SPTICARphiBinomial
List SPTICARphiBinomial(NumericMatrix W, const int nsites, const int ntimes, NumericVector phi, NumericVector nneighbours, double tau, const NumericVector y, double alpha, NumericVector XB, const double phiVarb_tune, NumericVector trials);
RcppExport SEXP CARBayesST_SPTICARphiBinomial(SEXP WSEXP, SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP phiSEXP, SEXP nneighboursSEXP, SEXP tauSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP XBSEXP, SEXP phiVarb_tuneSEXP, SEXP trialsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nneighbours(nneighboursSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type XB(XBSEXP);
    Rcpp::traits::input_parameter< const double >::type phiVarb_tune(phiVarb_tuneSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trials(trialsSEXP);
    __result = Rcpp::wrap(SPTICARphiBinomial(W, nsites, ntimes, phi, nneighbours, tau, y, alpha, XB, phiVarb_tune, trials));
    return __result;
END_RCPP
}
// SPTICARphiVarb
List SPTICARphiVarb(NumericMatrix W, const int nsites, const int ntimes, NumericVector phiVarb, NumericVector nneighbours, double tau, const NumericVector y, const NumericVector E, const double phiVarb_tune, double alpha, NumericVector XB);
RcppExport SEXP CARBayesST_SPTICARphiVarb(SEXP WSEXP, SEXP nsitesSEXP, SEXP ntimesSEXP, SEXP phiVarbSEXP, SEXP nneighboursSEXP, SEXP tauSEXP, SEXP ySEXP, SEXP ESEXP, SEXP phiVarb_tuneSEXP, SEXP alphaSEXP, SEXP XBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phiVarb(phiVarbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nneighbours(nneighboursSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type E(ESEXP);
    Rcpp::traits::input_parameter< const double >::type phiVarb_tune(phiVarb_tuneSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type XB(XBSEXP);
    __result = Rcpp::wrap(SPTICARphiVarb(W, nsites, ntimes, phiVarb, nneighbours, tau, y, E, phiVarb_tune, alpha, XB));
    return __result;
END_RCPP
}
